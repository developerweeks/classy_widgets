<?php
/*
 * This module made by DeveloperWeeks, still experimental  
 * Copyright 2013 Michael Weeks
 * open source code under the GNU Public License
 */


/**
 * Implements hook_form_ID_alter().
 */
function classy_widgets_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  
  $field = $form['#field'];
  $instance = field_info_instance($form['instance']['entity_type']['#value'], $form['instance']['field_name']['#value'], $form['instance']['bundle']['#value']);
  // values should be should be (node, field_instance_name, content_type) from my testing
  
  $form['field']['settings'] += classy_widgets_field_widget_settings_form($field, $instance);
  
}

/**
 * Implements hook_field_widget_info_alter().
 * make a space in the serialized field data to store my pieces
 */
function classy_widgets_field_widget_info_alter(&$info) {
  
  foreach ($info as $field => $holds) {    
    if (isset($info[$field]['settings'])) {
      // works best when same array keys as fields
      $info[$field]['settings'] += array( 
        'classy' => array(
          'classes' => array(),
          'psuedo-select' => array(),
          'psuedo-options' => array(),
        ),
      );
    }
  }
}  // no return, pass-by-reference

/*
 * define the piece of form to add to the field settings page
 */
function classy_widgets_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $field['settings'];
  $form = array();
  
  $form['classy'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Classy Widget settings'), 
    '#weight' => 5, 
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );
  $form['classy']['classes'] = array(
    '#type' => 'textfield',
    '#title' => t('Add these classes to this field on the form'),
    '#description' => t('Separate more than one class with commas'),
    '#default_value' => (isset($settings['classy']['classes']))?$settings['classy']['classes']:'',
  );
  
  if ($widget['type'] == 'text_textfield') {
    // add controls for psuedo-select, and the options list
    $form['classy']['psuedo-select'] = array(
      '#type' => 'radios',
      '#title' => t('Hide this field behind limited options'),
      '#options' => array (
        'radios' => t('Radio buttons'),
        'checkboxes' => t('Checkboxes'),
        'select' => t('Dropdown select'),
      ),
    '#default_value' => (isset($settings['classy']['psuedo-select']))?$settings['classy']['psuedo-select']:'',
    );
    // kinda crazy, very gimmicky, but could use ajax to change this fieldtype to the value selected

    $form['classy']['psuedo-options'] = array(
      '#type' => 'textfield',
      '#title' => t('Options to present for selection'),
      '#description' => t('In the form: key|long label,key|label, please'),
      '#default_value' => (isset($settings['classy']['psuedo-options']))?$settings['classy']['psuedo-options']:'',
    );
  }
  
  return $form;
}


/*
 * implements hook_form_alter, to check every field for classy-ness
 * and impart it to the field wrapper
 */
function classy_widgets_form_alter(&$form, &$form_state, $form_id) {
  if( !isset($form_state['field'])) {
    // this did not happen in my testing, so I am unsure what it should look like
    return;  // get out of here before it crashes
  }

  if( !$form['#node_edit_form'] ) {
    // currently only want this touching Add and Edit forms
    return;
  }
 
  // be language ambivalent
  $lang = $form['language']['#value'];

krumo( $form );
//$form[instance][default_value_widget][field_classy_test][#language]
// my test site is using 'en' but form is using 'und'
// the psuedo-select is showing on field_settings form
 
  foreach( $form_state['field'] as $field => $has ) {   

    if( isset( $has[$lang]['field']['settings']['classy']['classes'])) { 
      // this field has classy classes to apply 
      $classes = explode(',', check_plain( $has[$lang]['field']['settings']['classy']['classes']) );
      foreach ($classes as $add) {
        $form[$field]['#attributes']['class'][] = $add;
        // places it at the same level as field-type-text
      }     
    }

    if( isset( $has[$lang]['field']['settings']['classy']['psuedo-select'])) {
      // a psuedo-select effect is requested on this field, apply it
      $form[$field][$lang][0]['value']['#type'] = $has[$lang]['field']['settings']['classy']['psuedo-select'];
krumo( $form[$field]);

// Select lists requires a little more tweaking
if($has[$lang]['field']['settings']['classy']['psuedo-select'] == 'select' ) {
  
}

      // key|label,key|label with spaces allowed
      // so pull out the words between , and | for keys, and between | and , for labels
      preg_match_all("/,?([A-z ]+)\|/", $has[$lang]['field']['settings']['classy']['psuedo-options'], $aKey);
      preg_match_all("/\|([A-z ]+),?/", $has[$lang]['field']['settings']['classy']['psuedo-options'], $aLabel);

      // set the options from the settings
      $form[$field][$lang][0]['value']['#options'] = array_combine($aKey[1], $aLabel[1]);
      $form[$field][$lang][0]['value']['#multiple'] = FALSE;
    }
  }
  // this map built from explaining one site's form, might not be universal
}


/*
 * helper function, because reassempling value paths from dpm is slightly irksome
 */
function explain($element = array(), $depth = 1, $lead = '', $cap = ' <br>' ) {
  $string = '';
  if($depth < 1) {
    return '';
  }
  if( is_array($element)){
    foreach($element as $key => $part){
      $string .= ($depth == 1)?'['.$key.']':explain($part, $depth-1, $lead.'['.$key.']');
    }
  } elseif ( is_object($element)) {
    foreach($element as $key => $part){
      $string .= ($depth == 1)?'->'.$key:explain($part, $depth-1, $lead.'->'.$key);
    }
  } else {
    $string .= $lead .' = '.$element .$cap;  
  }
  return $string;
}
